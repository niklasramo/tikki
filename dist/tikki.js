import{Emitter}from"eventti";class Ticker{phases;autoTick;_raf;_queue;_emitter;constructor(t={}){const{phases:e=[],autoTick:i=!0}=t;this.phases=e,this.autoTick=i,this._raf=null,this._emitter=new Emitter,this._queue=[],this.tick=this.tick.bind(this)}tick(t){this._raf=null;const{_queue:e,phases:i}=this;if(e.length)throw new Error("Can't tick before the previous tick has finished.");let s,r,h,n,o,a;for(s=0,h=i.length;s<h;s++)a=this._emitter._getListeners(i[s]),a&&e.push(a);for(s=0,h=e.length;s<h;s++)for(o=e[s],r=0,n=o.length;r<n;r++)o[r](t);e.length=0,this.autoTick&&this._emitter.listenerCount()&&this.start()}start(){this.autoTick&&null===this._raf&&(this._raf=requestAnimationFrame(this.tick))}stop(){null!==this._raf&&(cancelAnimationFrame(this._raf),this._raf=null)}on(t,e){const i=this._emitter.on(t,e);return this.start(),i}once(t,e){const i=this._emitter.once(t,e);return this.start(),i}off(t,e){return this._emitter.off(t,e)}listenerCount(t){return this._emitter.listenerCount(t)}}export{Ticker};